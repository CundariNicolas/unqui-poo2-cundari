2. Violaciones del principio SOLID:
a- 	Single Responsability: ClienteEmail tiene más de una 
	responsabilidad, como la de gestionar toda la casilla de mensajes,
	sería mucho mejor dividir el cliente en los distintos tipos de comportamientos
b- 	Opened-Closed Principle: Si quiero cambiar el nombre de usuario, tengo que modificar la clase ClienteEmail.
	Si quiero conectarme a otro tipo de servidor de correos, también. Otros tipos de correo, con archivos multimedia por ejemplo,
	habría que cambiar buena parte del código.
c- 	Liskov's sustitution principle: no hay subclases
d- 	interface segregation: IServidor tiene protocolos que no son
	aplicables por todos los servidores, como la clase servidorPop tiene
	protocolo que no corresponde a su clase
	
	
3-	Soluciones: crear una nueva interfaz para otro tipo de servidor al que le corresponda el protocolo de IServidor que no le corresponde. 
	que ClienteEmail pueda ser instanciado con cualquier tipo de Servidor lo haría escalable y que debamos cambiar lo menos posible el código.
	